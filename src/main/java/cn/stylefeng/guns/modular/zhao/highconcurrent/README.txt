原子性：锁
    1、synchronized :依赖JVM
    2、lock


原子性 - 对比
    synchronized:不可中断锁，适合竞争不激烈，可读性好
    Lock:可中断锁，多样化同步，竞争激烈时能维持常态
    Atomic:竞争激烈时能维持常态，比Lock性能好，但只能同步一个值

可见性
    导致共享变量在线程间不可见的原因
    1、线程交叉执行
    2、重排序结合线程交叉执行
    3、共享变量更新后的值没有在工作内存与主存间及时更新

volatile:适合状态标识

安全发布对象
    1、在静态初始化函数中初始化一个对象引用
    2、将对象的引用保存到volatile类型域或者AtomicReference对象中
    3、将对象的引用保存到某个正确构造对象的final类型域中
    4、将对象的引用保存到一个由锁保护的域中


